SOLUCIÓN COMPLETA PARA EL PROBLEMA DE VALIDACIÓN DE INPUT

PROBLEMA IDENTIFICADO:
El input no permite escribir números decimales porque la lógica de validación es demasiado restrictiva y resetea los estados intermedios.

ANÁLISIS DEL CÓDIGO ACTUAL:
```javascript
// CÓDIGO PROBLEMÁTICO
onChange={(e) => {
  const value = e.target.value
  if (value === "" || !/[a-zA-Z]/.test(value)) {
    if (value === "" || value === "." || value === "-" || value === "-.") {
      setUserResult(null)  // ← AQUÍ ESTÁ EL PROBLEMA
    } else {
      const numValue = parseFloat(value)
      setUserResult(isNaN(numValue) ? null : numValue)
    }
  }
}}
```

PROBLEMAS ESPECÍFICOS:
1. Cuando escribes "2.", se resetea a null
2. Cuando escribes "2.6", parseFloat("2.6") funciona, pero "2." no
3. Los estados intermedios se pierden
4. No permite construir el número paso a paso

SOLUCIÓN 1: VALIDACIÓN PERMISIVA
```javascript
onChange={(e) => {
  const value = e.target.value
  
  // Solo bloquear letras, permitir todo lo demás
  if (value === "" || !/[a-zA-Z]/.test(value)) {
    setUserResult(value)
  }
}}
```

SOLUCIÓN 2: VALIDACIÓN INTELIGENTE
```javascript
onChange={(e) => {
  const value = e.target.value
  
  // Solo bloquear letras
  if (value === "" || !/[a-zA-Z]/.test(value)) {
    if (value === "") {
      setUserResult(null)
    } else {
      // Permitir cualquier entrada que no sea letra
      setUserResult(value)
    }
  }
}}
```

SOLUCIÓN 3: VALIDACIÓN CON PARSEO INTELIGENTE
```javascript
onChange={(e) => {
  const value = e.target.value
  
  // Solo bloquear letras
  if (value === "" || !/[a-zA-Z]/.test(value)) {
    if (value === "") {
      setUserResult(null)
    } else {
      // Intentar parsear, pero no resetear si falla
      const numValue = parseFloat(value)
      if (!isNaN(numValue)) {
        setUserResult(numValue)
      } else {
        // Permitir entrada aunque no sea número válido aún
        setUserResult(value)
      }
    }
  }
}}
```

CAMBIO RECOMENDADO EN EL ARCHIVO:
Reemplazar las líneas 923-934 en components/fundamental-theorem/visualization-section.tsx:

```javascript
onChange={(e) => {
  const value = e.target.value
  
  // Solo bloquear letras, permitir todo lo demás
  if (value === "" || !/[a-zA-Z]/.test(value)) {
    setUserResult(value)
  }
}}
```

Y cambiar el value del input a:
```javascript
value={userResult !== null ? userResult.toString() : ""}
```

VENTAJAS DE ESTA SOLUCIÓN:
✅ Permite escribir "2.6667" paso a paso
✅ No resetea estados intermedios
✅ Mantiene la validación contra letras
✅ Simple y efectiva
✅ Compatible con parseFloat en la validación final

PRUEBAS A REALIZAR:
1. Escribir "2" → debe permitir
2. Escribir "2." → debe permitir (no resetear)
3. Escribir "2.6" → debe permitir
4. Escribir "2.6667" → debe permitir
5. Escribir "abc" → debe bloquear
6. Borrar todo → debe resetear a vacío

ESTADO: LISTO PARA IMPLEMENTAR

